{"version":3,"sources":["components/Meals.js","actions/mealActions.js","actions/types.js","components/Nav.js","components/About.js","components/Main.js","App.js","serviceWorker.js","reducers/mealReducer.js","reducers/rootReducer.js","store.js","index.js"],"names":["Meals","this","props","fetchMeals","meals","map","meal","className","key","id","src","imageUrl","name","price","priceCurrency","style","width","href","height","method","action","type","value","placeholder","textAlign","Component","connect","state","items","dispatch","fetch","then","res","json","payload","Nav","to","About","Main","exact","path","component","App","Boolean","window","location","hostname","match","initialState","item","combineReducers","middleware","thunk","store","createStore","rootReducer","applyMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fd9ade8c.chunk.js","sourcesContent":[" import React, { Component } from 'react'\n import PropTypes from 'prop-types';\nimport {connect} from 'react-redux';\nimport {fetchMeals} from '../actions/mealActions'\nimport '../App.css'\nimport '../material.css'\n\n\n\n\nclass Meals extends Component {\n    componentWillMount(){\n        this.props.fetchMeals();\n    }\n    \n\n    render() {\n        const mealItems=this.props.meals.map(meal=> (\n           <div className = \"col-md-4\" key = {meal.id}>\n     \n      \n    \n<img className=\"image-styling\" src={meal.imageUrl} />\n<h4>{meal.name}</h4>\n        <p>{meal.price}</p>\n       <p>{meal.priceCurrency}</p>\n\n        </div>\n        )); \nconst meals=this.props.meals.map(meal=> (\n   \n    <div className=\"col-md-4\" key = {meal.id}>\n     \n                  <div className=\"card card-plain card-blog\">\n                    <div className=\"card-header card-header-image\" style={{width:\"350px\"}}>\n                      <a href=\"#pablo\">\n                        <img className=\"img img-raised\" style={{height:\"220px\"}} src={meal.imageUrl} />\n                      </a>\n                    </div>\n                    <div className=\"card-body \">\n                      \n                      <h2 className=\"card-title\">\n                        <a href=\"#pablo\">{meal.name}</a>\n                      </h2>\n                      <p className=\"card-description\">\n                        <p>{meal.priceCurrency}{meal.price}</p>\n                        <a href=\"#pablo\"> Read More </a>\n                      </p>\n                    </div>\n                  </div>\n                \n    \n\n\n        \n \t</div>\n        )); \n\n    return (\n<>\n<div className=\"subscribe-line subscribe-line-image\">\n          <div className=\"container\">\n            <div className=\"row\">\n              <div className=\"col-md-6 ml-auto mr-auto\">\n                <div className=\"text-center\">\n                  <h2 className=\"title\">Order your Favorite Meal</h2>\n                  <p className=\"description\">\n                    30% OFF on your first order valid from 25th Dec - 7th January 2020.\n                  </p>\n                </div>\n                <div className=\"card card-raised card-form-horizontal\">\n                  <div className=\"card-body \">\n                    <form method=\"\" action=\"#\">\n                      <div className=\"row\">\n                        <div className=\"col-lg-8 col-md-6 \">\n                          <span className=\"bmd-form-group\"><div className=\"input-group\">\n                            <div className=\"input-group-prepend\">\n                          \n                            </div>\n                            <input type=\"email\" value=\"\" placeholder=\"Enter Delivery Address...\" className=\"form-control\"></input>\n                          </div></span>\n                        </div>\n                        <div className=\"col-lg-4 col-md-6 \">\n                          <button type=\"button\" className=\"btn btn-primary btn-block\">Search</button>\n                        </div>\n                      </div>\n                    </form>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\t\t\n\t<div className=\"col-md-12 ml-auto mr-auto\">\n              <h1 className=\"title\" style={{textAlign:\"center\"}}>Popular Meals and Restaurants</h1>\n              {meals}\n\n            </div>\n   </>\n         \n        );\n    }\n}\n\n\nMeals.propTypes = {\nfetchMeals:PropTypes.func.isRequired,\nmeals:PropTypes.array.isRequired\n}\n\nconst mapStateToProps = state => ({\n   meals:state.meals.items\n});\n\nexport default connect(mapStateToProps,{fetchMeals})(Meals);\n"," import {FETCH_MEALS,NEW_MEAL} from './types'\n\nexport const fetchMeals =()=>dispatch =>{\n    fetch('https://my-json-server.typicode.com/EUGINELETHAL/POST-REDUX/meals')\n    .then (res=>res.json())\n    .then(meals=>\n        dispatch({\n            type:FETCH_MEALS,\n            payload:meals\n        }));\n};\n\n\n\n\n\n\n\n\n\n\n\n\n\n","export const FETCH_MEALS='FETCH_MEALS';\nexport const NEW_MEAL='NEW_MEAL';\n","import React from 'react'\nimport '../App.css'\nimport { NavLink } from 'react-router-dom';\nconst Nav = () => (\n  <div className=\"topnav\">\n  <a><NavLink to='/'>Book-A-Meal</NavLink></a>\n  <a><NavLink to='/about'>Join as a Vendor</NavLink></a>\n  <div className=\"search-container\">\n    <form action=\"/action_page.php\">\n      <input type=\"text\" placeholder=\"Search..\" name=\"search\"/>\n      <button type=\"submit\"><i className=\"fa fa-search\"></i></button>\n    </form>\n  </div>\n</div>\n\n   \n );\nexport default Nav\n","import React from 'react'\n\nconst About = () => (\n      <div className='about'>\n        <h1>About Me</h1>\n        <p>Ipsum dolor dolorem consectetur est velit fugiat. Dolorem provident corporis fuga saepe distinctio ipsam? Et quos harum excepturi \t\tdolorum molestias?</p>\n        <p>Ipsum dolor dolorem consectetur est velit fugiat. Dolorem provident corporis fuga saepe distinctio ipsam? Et quos harum excepturi \t\tdolorum molestias?</p>\n      </div>\n    );\nexport default About;\n","import {BrowserRouter,Switch, Route } from 'react-router-dom';\nimport React from 'react'\nimport Meals from './Meals'\nimport Nav from './Nav'\nimport About  from './About'\n\n    \n\n\nconst Main = () => (\n     <BrowserRouter>\n     <div>\n    <Nav/>\n    <Switch>\n     <Route exact path='/' component={Meals}></Route>\n     <Route exact path='/add' component={About}></Route>\n    </Switch>\n    </div>\n   </BrowserRouter>\n  );\nexport default Main;\n","import React from 'react';\n\nimport Main from \"./components/Main\";\n\n\nfunction App() {\n  return (\n    \n\n  <div className=\"App\">\n   \n    <Main/>  \n   \n      \n\n    </div>\n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {FETCH_MEALS,NEW_MEALS} from '../actions/types'\n\nconst initialState = {\nitems:[],\nitem:{}\n\n\n};\n\nexport default function (state=initialState,action){\n    switch(action.type){\n    case FETCH_MEALS:\n    return {\n    ...state,\n    items:action.payload\n    };\ndefault:\n    return state;\n    }\n}\n","import {combineReducers  } from \"redux\";\nimport mealReducer from \"./mealReducer\";\n\n\nexport default combineReducers({\n    meals:mealReducer\n});\n","import {createStore, applyMiddleware} from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers/rootReducer';\n\nconst initialState={};\nconst middleware = [thunk];\nconst store = createStore(rootReducer,initialState,applyMiddleware(...middleware));\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from 'react-redux';\nimport store from './store';\n\n\n\n\n\n\n  \n    \nReactDOM.render(\n  <Provider store={store}>\n       <App />\n  </Provider>,\n\n  \n document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}